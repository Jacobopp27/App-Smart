Backend – Endpoint /operations (Node.js, Express, PostgreSQL, TypeORM)
Historia de usuario:
Como usuario autenticado, quiero registrar una operación (compra o venta) en el sistema para llevar un control financiero seguro y consistente.
Criterios de aceptación
1. Estructura del código
o El endpoint /operations está definido en su propio módulo o ruta.
o Se separa controller → service → repository.
2. Validación y seguridad
o Middleware de autenticación JWT en Express.
o Validación de datos de entrada (ejemplo: type, amount, currency, userId).
3. Transacción en TypeORM/PostgreSQL
o Uso correcto de queryRunner o manager.transaction.
o Si ocurre error en cualquier paso, la transacción se revierte.
4. Persistencia y consistencia
o La tabla operations contiene: id, type, amount, currency, userId, createdAt.
o Se respetan restricciones de integridad (ejemplo: amount > 0).
5. Respuesta de API
o Respuesta exitosa: 201 Created con objeto JSON { id, type, amount, currency, createdAt }.
o Manejo de errores adecuado con códigos 400/401/500 sin exponer información sensible.
 
Frontend – Formulario de Login (React, Context API)
Historia de usuario:
Como usuario, quiero iniciar sesión en la aplicación para acceder a las secciones privadas de forma segura.
Criterios de aceptación
1. Formulario de login
o Campos obligatorios: email y password.
o Validación básica en frontend antes de enviar la petición.
2. Integración con API
o Envío de credenciales vía POST /auth/login.
o En caso de éxito, guardar token en Context.
o En caso de error (401), mostrar mensaje “Credenciales inválidas”.
3. Gestión de sesión con Context API
o Context mantiene el estado de sesión (isAuthenticated, token, user).
o El token persiste durante la sesión (localStorage o sessionStorage).
4. ProtectedRoute
o Si no hay sesión activa, redirigir automáticamente a /login.
o Si hay sesión activa, renderizar la ruta privada solicitada.
5. Flujo de usuario
o Tras login exitoso, redirigir a /dashboard.
o Logout elimina token y limpia sesión.
 
DevOps Básico
Criterios de aceptación
1. Configuración de ambientes
o Uso de variables de entorno (.env) para credenciales de base de datos y JWT_SECRET.
o No se permiten secretos hardcodeados en el código.
2. Ejecución local y despliegue
o Backend y frontend se ejecutan con npm run dev.
o Scripts de build (npm run build) funcionan correctamente.
3. Gestión de procesos
o El backend puede correr con PM2 (o nodemon en desarrollo).
4. NGINX básico (opcional)
o Conocimiento de servir el frontend estático y configurar proxy para /api hacia el backend.